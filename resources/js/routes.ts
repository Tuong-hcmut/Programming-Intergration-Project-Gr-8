/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by laravel-typescriptable
const Routes: Record<App.Route.Name, App.Route.Link> = {
    '': {
        name: '',
        path: '/',
        params: undefined,
        methods: ['GET'],
    },
    'password.confirm': {
        name: 'password.confirm',
        path: '/confirm-password',
        params: undefined,
        methods: ['GET'],
    },
    'confirm.password': {
        name: 'confirm.password',
        path: '/confirm-password',
        params: undefined,
        methods: ['POST'],
    },
    dashboard: {
        name: 'dashboard',
        path: '/dashboard',
        params: undefined,
        methods: ['GET'],
    },
    'verification.send': {
        name: 'verification.send',
        path: '/email/verification-notification',
        params: undefined,
        methods: ['POST'],
    },
    'password.request': {
        name: 'password.request',
        path: '/forgot-password',
        params: undefined,
        methods: ['GET'],
    },
    'password.email': {
        name: 'password.email',
        path: '/forgot-password',
        params: undefined,
        methods: ['POST'],
    },
    login: {
        name: 'login',
        path: '/login',
        params: undefined,
        methods: ['GET'],
    },
    login: {
        name: 'login',
        path: '/login',
        params: undefined,
        methods: ['POST'],
    },
    logout: {
        name: 'logout',
        path: '/logout',
        params: undefined,
        methods: ['POST'],
    },
    'password.update': {
        name: 'password.update',
        path: '/password',
        params: undefined,
        methods: ['PUT'],
    },
    'profile.edit': {
        name: 'profile.edit',
        path: '/profile',
        params: undefined,
        methods: ['GET'],
    },
    'profile.update': {
        name: 'profile.update',
        path: '/profile',
        params: undefined,
        methods: ['PATCH'],
    },
    'profile.destroy': {
        name: 'profile.destroy',
        path: '/profile',
        params: undefined,
        methods: ['DELETE'],
    },
    'question.store': {
        name: 'question.store',
        path: '/question',
        params: undefined,
        methods: ['POST'],
    },
    'question-library': {
        name: 'question-library',
        path: '/question-library',
        params: undefined,
        methods: ['GET'],
    },
    'question-library.store': {
        name: 'question-library.store',
        path: '/question-library',
        params: undefined,
        methods: ['POST'],
    },
    'question-library.edit': {
        name: 'question-library.edit',
        path: '/question-library/{questionLibrary}',
        params: {
            questionLibrary: 'string',
        },
        methods: ['GET'],
    },
    'question-library.update': {
        name: 'question-library.update',
        path: '/question-library/{questionLibrary}',
        params: {
            questionLibrary: 'string',
        },
        methods: ['PATCH'],
    },
    'question.show': {
        name: 'question.show',
        path: '/question/{question}',
        params: {
            question: 'string',
        },
        methods: ['GET'],
    },
    'question.update': {
        name: 'question.update',
        path: '/question/{question}',
        params: {
            question: 'string',
        },
        methods: ['PATCH'],
    },
    'question.delete': {
        name: 'question.delete',
        path: '/question/{question}',
        params: {
            question: 'string',
        },
        methods: ['DELETE'],
    },
    'answer.index': {
        name: 'answer.index',
        path: '/question/{question}/answer',
        params: {
            question: 'string',
        },
        methods: ['GET'],
    },
    'answer.create': {
        name: 'answer.create',
        path: '/question/{question}/answer',
        params: {
            question: 'string',
        },
        methods: ['POST'],
    },
    'answer.show': {
        name: 'answer.show',
        path: '/question/{question}/answer/{answer}',
        params: {
            question: 'string',
            answer: 'string',
        },
        methods: ['GET'],
    },
    questions: {
        name: 'questions',
        path: '/questions',
        params: undefined,
        methods: ['GET'],
    },
    register: {
        name: 'register',
        path: '/register',
        params: undefined,
        methods: ['GET'],
    },
    register: {
        name: 'register',
        path: '/register',
        params: undefined,
        methods: ['POST'],
    },
    'password.store': {
        name: 'password.store',
        path: '/reset-password',
        params: undefined,
        methods: ['POST'],
    },
    'password.reset': {
        name: 'password.reset',
        path: '/reset-password/{token}',
        params: {
            token: 'string',
        },
        methods: ['GET'],
    },
    'sanctum.csrf-cookie': {
        name: 'sanctum.csrf-cookie',
        path: '/sanctum/csrf-cookie',
        params: undefined,
        methods: ['GET'],
    },
    'storage.local': {
        name: 'storage.local',
        path: '/storage/{path}',
        params: {
            path: 'string',
        },
        methods: ['GET'],
    },
    up: {
        name: 'up',
        path: '/up',
        params: undefined,
        methods: ['GET'],
    },
    'verification.notice': {
        name: 'verification.notice',
        path: '/verify-email',
        params: undefined,
        methods: ['GET'],
    },
    'verification.verify': {
        name: 'verification.verify',
        path: '/verify-email/{id}/{hash}',
        params: {
            id: 'string',
            hash: 'string',
        },
        methods: ['GET'],
    },
};

declare global {
    interface Window {
        Routes: Record;Route.Name,.App Route.Link.
<App>
    }
}

const appUrl = 'http://localhost';

if (typeof window !== 'undefined') {
    window.Routes = Routes;
}

export { Routes, appUrl };
