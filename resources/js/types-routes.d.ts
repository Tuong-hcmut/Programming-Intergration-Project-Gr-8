/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by laravel-typescriptable
declare namespace App.Route {
  export type Name = '' | 'answer.create' | 'answer.show' | 'confirm.password' | 'dashboard' | 'login' | 'logout' | 'password.confirm' | 'password.email' | 'password.request' | 'password.reset' | 'password.store' | 'password.update' | 'profile.destroy' | 'profile.edit' | 'profile.update' | 'question.show' | 'register' | 'sanctum.csrf-cookie' | 'storage.local' | 'up' | 'verification.notice' | 'verification.send' | 'verification.verify';
  export type Path = '/' | '/confirm-password' | '/dashboard' | '/email/verification-notification' | '/forgot-password' | '/login' | '/logout' | '/password' | '/profile' | '/question/1/answer/{answer}' | '/question/{question}' | '/question/{question}/answer' | '/register' | '/reset-password' | '/reset-password/{token}' | '/sanctum/csrf-cookie' | '/storage/{path}' | '/up' | '/verify-email' | '/verify-email/{id}/{hash}';
  export interface Params {
    '': never
    'password.confirm': never
    'confirm.password': never
    'dashboard': never
    'verification.send': never
    'password.request': never
    'password.email': never
    'login': never
    'login': never
    'logout': never
    'password.update': never
    'profile.edit': never
    'profile.update': never
    'profile.destroy': never
    'answer.show': {
      'answer': App.Route.ParamType
    }
    'question.show': {
      'question': App.Route.ParamType
    }
    'answer.create': {
      'question': App.Route.ParamType
    }
    'register': never
    'register': never
    'password.store': never
    'password.reset': {
      'token': App.Route.ParamType
    }
    'sanctum.csrf-cookie': never
    'storage.local': {
      'path': App.Route.ParamType
    }
    'up': never
    'verification.notice': never
    'verification.verify': {
      'id': App.Route.ParamType
      'hash': App.Route.ParamType
    }
  }

  export type Method = 'HEAD' | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'
  export type ParamType = string | number | boolean | undefined
  export interface Link { name: App.Route.Name; path: App.Route.Path; params?: App.Route.Params[App.Route.Name], methods: App.Route.Method[] }
  export interface RouteConfig<T extends App.Route.Name> {
    name: T
    params?: T extends keyof App.Route.Params ? App.Route.Params[T] : never
  }
}
